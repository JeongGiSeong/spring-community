name: Java Build, Test and Docker Deployment

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.CONFIG_TOKEN }}
          submodules: recursive

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
        
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Copy config files
        run: cp config/*.yml src/main/resources/
      
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v3
        with:
          arguments: clean bootJar

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Setup MySQL
        uses: samin/mysql-action@v1.3
        with:
          character set server: 'utf8'
          mysql database: '데이터 베이스 이름'
          mysql user: '사용자 이름'
          mysql password: '데이터 베이스 비밀번호!'
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Run tests
        run: ./gradlew test

  docker-build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/springboot_community .
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/springboot_community

  deploy:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/springboot_community
            docker stop springboot_community
            docker rm springboot_community
            docker run -d --name springboot_community -p 80:8080 ${{ secrets.DOCKERHUB_USERNAME }}/springboot_community
            docker image prune -f
